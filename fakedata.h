#ifndef FAKEDATA_H
#define FAKEDATA_H

#define F_RGB_W   \
  {               \
    255, 255, 255 \
  }
#define F_RGB_R \
  {             \
    255, 0, 0   \
  }
#define F_RGB_Y \
  {             \
    255, 255, 0 \
  }
#define F_RGB_O \
  {             \
    255, 165, 0 \
  }
#define F_RGB_B \
  {             \
    0, 0, 255   \
  }
#define F_RGB_G \
  {             \
    0, 128, 0   \
  }

// R(Right)、L(Left)、U(Up)、D(Down)、F(Front)、B(Back)
//  #define U 0
//  #define F 1
//  #define D 2
//  #define B 3
//  #define R 4
//  #define L 5
//  fake_scan_face(1, 3, 2);
//  fake_scan_face(2, 2, 2);
//  fake_scan_face(3, 1, 2);
//  fake_scan_face(4, 0, 2);
//  turn(-1);
//  fake_scan_face(5, 4, 6);
//  fake_scan_face(6, 5, 2);

// 魔方初始状态， 摆放位置为 白色上， 红色前， 前朝向颜色传感器
// 扫描顺序对应于数组下标
// 6: 8 6 7 0 1 2 3 4 5
// 2: 8 2 3 4 5 6 7 0 1
//构造测试数据， 对应于魔方摆放位置 U - W,  F - R, D - Y , B - O, R - B , L - G，

// uint8_t fake_rgb[][3] = {
//     F_RGB_O, F_RGB_O, F_RGB_O,
//     F_RGB_O, F_RGB_O, F_RGB_O,
//     F_RGB_O, F_RGB_O, F_RGB_O,

//     F_RGB_Y, F_RGB_Y, F_RGB_Y,
//     F_RGB_Y, F_RGB_Y, F_RGB_Y,
//     F_RGB_Y, F_RGB_Y, F_RGB_Y,

//     F_RGB_R, F_RGB_R, F_RGB_R,
//     F_RGB_R, F_RGB_R, F_RGB_R,
//     F_RGB_R, F_RGB_R, F_RGB_R,

//     F_RGB_W, F_RGB_W, F_RGB_W,
//     F_RGB_W, F_RGB_W, F_RGB_W,
//     F_RGB_W, F_RGB_W, F_RGB_W,

//     F_RGB_G, F_RGB_G, F_RGB_G,
//     F_RGB_G, F_RGB_G, F_RGB_G,
//     F_RGB_G, F_RGB_G, F_RGB_G,

//     F_RGB_B, F_RGB_B, F_RGB_B,
//     F_RGB_B, F_RGB_B, F_RGB_B,
//     F_RGB_B, F_RGB_B, F_RGB_B,

// };

//魔方上层右旋一次后的数据
// uint8_t fake_rgb[][3] = {
//     F_RGB_G,
//     F_RGB_G,
//     F_RGB_G,
//     F_RGB_O,
//     F_RGB_O,
//     F_RGB_O,
//     F_RGB_O,
//     F_RGB_O,
//     F_RGB_O,

//     F_RGB_Y,
//     F_RGB_Y,
//     F_RGB_Y,
//     F_RGB_Y,
//     F_RGB_Y,
//     F_RGB_Y,
//     F_RGB_Y,
//     F_RGB_Y,
//     F_RGB_Y,

//     F_RGB_R,
//     F_RGB_R,
//     F_RGB_R,
//     F_RGB_R,
//     F_RGB_B,
//     F_RGB_B,
//     F_RGB_B,
//     F_RGB_R,
//     F_RGB_R,

//     F_RGB_W,
//     F_RGB_W,
//     F_RGB_W,
//     F_RGB_W,
//     F_RGB_W,
//     F_RGB_W,
//     F_RGB_W,
//     F_RGB_W,
//     F_RGB_W,

//     F_RGB_G,
//     F_RGB_G,
//     F_RGB_R,
//     F_RGB_R,
//     F_RGB_R,
//     F_RGB_G,
//     F_RGB_G,
//     F_RGB_G,
//     F_RGB_G,

//     F_RGB_O,
//     F_RGB_B,
//     F_RGB_B,
//     F_RGB_B,
//     F_RGB_B,
//     F_RGB_B,
//     F_RGB_O,
//     F_RGB_O,
//     F_RGB_B,

// };

uint8_t fake_rgb[][3] = {
    {246, 88, 76},
    {76, 152, 90},
    {255, 101, 84},
    {89, 54, 55},
    {87, 53, 55},
    {249, 246, 125},
    {86, 52, 53},
    {71, 144, 87},
    {255, 137, 111},
    {45, 60, 76},
    {255, 103, 86},
    {70, 143, 85},
    {91, 54, 55},
    {241, 238, 121},
    {90, 54, 56},
    {170, 168, 177},
    {76, 156, 93},
    {255, 255, 167},
    {255, 98, 82},
    {51, 63, 82},
    {255, 101, 84},
    {255, 102, 85},
    {91, 54, 55},
    {207, 206, 218},
    {86, 53, 54},
    {45, 61, 79},
    {121, 63, 67},
    {78, 163, 95},
    {255, 115, 94},
    {45, 59, 75},
    {255, 99, 83},
    {184, 182, 193},
    {93, 54, 56},
    {255, 253, 128},
    {47, 65, 87},
    {255, 255, 255},
    {72, 147, 87},
    {224, 223, 116},
    {205, 203, 108},
    {186, 184, 195},
    {46, 60, 76},
    {209, 208, 220},
    {202, 200, 211},
    {243, 240, 123},
    {55, 74, 99},
    {190, 188, 102},
    {255, 255, 130},
    {70, 137, 84},
    {74, 152, 90},
    {217, 216, 228},
    {47, 63, 80},
    {45, 60, 77},
    {206, 204, 214},
    {91, 190, 110},
};

// 扫描完后的色块排列
// U D L R F B 代表上下左右前后

// nxt
//
// Face:offset  piece
// 3U:2         8 2 3 4 5 6 7 0 1
// 2R:2         8 2 3 4 5 6 7 0 1
// 1D:2         8 2 3 4 5 6 7 0 1
// 0L:2         8 2 3 4 5 6 7 0 1
// 4B:6         8 6 7 0 1 2 3 4 5
// 5F:2         8 2 3 4 5 6 7 0 1
//
// 扫描前
//       +--4B-+
//       |2 3 4|
//       |1 8 5|
//       |0 7 6|
// +--0L-+--3U-+--2R-+
// |6 7 0|6 7 0|6 7 0|
// |5 8 1|5 8 1|5 8 1|
// |4 3 2|4 3 2|4 3 2|
// +-----+--5F-+-----+
//       |2 3 4|
//       |1 8 5|
//       |0 7 6|
//       +--1D-+
//       |2 3 4|
//       |1 8 5|
//       |0 7 6|
//       +-----+
// 扫描后
//       +--1B-+
//       |6 7 0|
//       |5 8 1|
//       |4 3 2|
// +--2L-+--5U-+--0R-+
// |0 1 2|6 7 0|4 5 6|
// |7 8 3|5 8 1|3 8 7|
// |6 5 4|4 3 2|2 1 0|
// +-----+--3F-+-----+
//       |2 3 4|
//       |1 8 5|
//       |0 7 6|
//       +--4D-+
//       |6 7 0|
//       |5 8 1|
//       |4 3 2|
//       +-----+

// Spike
//
// i(display)
//   0 4 1 5 2 6 3 7
//
// Face:offset  piece
// 0U:4         8 4 5 6 7 0 1 2 3
// 4R:6         8 6 7 0 1 2 3 4 5
// 2D:0         8 0 1 2 3 4 5 6 7
// 3B:6         8 6 7 0 1 2 3 4 5
// 5L:4         8 4 5 6 7 0 1 2 3
// 1F:4         8 4 5 6 7 0 1 2 3
//
// 扫描前
//       +--3B-+
//       |2 3 4|
//       |1 8 5|
//       |0 7 6|
// +--5L-+--0U-+--4R-+
// |0 1 2|0 1 2|2 3 4|
// |7 8 3|7 8 3|1 8 5|
// |6 5 4|6 5 4|0 7 6|
// +-----+--1F-+-----+
//       |0 1 2|
//       |7 8 3|
//       |6 5 4|
//       +--2D-+
//       |4 5 6|
//       |3 8 7|
//       |2 1 0|
//       +-----+
// 扫描后
//       +--0B-+
//       |0 1 2|
//       |7 8 3|
//       |6 5 4|
// +--5L-+--1U-+--4R-+
// |0 1 2|0 1 2|0 1 2|
// |7 8 3|7 8 3|7 8 3|
// |6 5 4|6 5 4|6 5 4|
// +-----+--2F-+-----+
//       |0 1 2|
//       |7 8 3|
//       |6 5 4|
//       +--3D-+
//       |0 1 2|
//       |7 8 3|
//       |6 5 4|
//       +-----+

uint8_t fake_colors[][NFACE * 9][3] = {
    // qiyi
    {{180, 72, 65}, {224, 80, 72}, {142, 134, 134}, {152, 140, 139}, {65, 107, 124}, {66, 108, 124}, {154, 153, 83}, {146, 144, 79}, {167, 81, 73}, {77, 112, 68}, {108, 58, 57}, {107, 49, 53}, {161, 156, 155}, {88, 134, 79}, {93, 137, 79}, {156, 150, 83}, {167, 165, 164}, {206, 202, 198}, {47, 70, 79}, {143, 148, 149}, {136, 136, 134}, {106, 124, 79}, {116, 51, 56}, {91, 136, 79}, {161, 162, 87}, {58, 93, 108}, {255, 110, 104}, {212, 79, 72}, {207, 84, 73}, {60, 98, 113}, {106, 48, 52}, {94, 46, 50}, {168, 159, 87}, {145, 138, 137}, {79, 116, 126}, {254, 252, 124}, {153, 156, 84}, {63, 106, 125}, {78, 113, 69}, {80, 119, 71}, {147, 147, 145}, {162, 166, 91}, {223, 81, 72}, {225, 83, 73}, {116, 182, 101}, {56, 90, 103}, {105, 55, 61}, {116, 50, 55}, {115, 51, 56}, {215, 80, 72}, {209, 79, 70}, {71, 102, 63}, {147, 154, 84}, {90, 148, 168}},
    // dayan
    {{189, 66, 56}, {43, 48, 59}, {189, 66, 56}, {211, 72, 60}, {63, 38, 39}, {35, 47, 62}, {177, 174, 90}, {34, 45, 58}, {201, 197, 102}, {19, 24, 30}, {122, 41, 35}, {24, 31, 40}, {38, 77, 46}, {39, 82, 48}, {39, 81, 48}, {39, 25, 25}, {138, 46, 39}, {73, 144, 83}, {23, 31, 38}, {119, 116, 62}, {103, 101, 107}, {49, 29, 30}, {51, 29, 30}, {41, 86, 51}, {43, 28, 28}, {49, 29, 30}, {135, 132, 141}, {33, 63, 39}, {147, 49, 40}, {29, 56, 35}, {91, 90, 95}, {32, 65, 39}, {41, 23, 24}, {94, 92, 97}, {99, 98, 103}, {24, 33, 46}, {162, 160, 168}, {192, 190, 96}, {128, 125, 70}, {66, 42, 40}, {153, 150, 81}, {165, 163, 86}, {248, 79, 66}, {167, 166, 174}, {255, 103, 83}, {33, 44, 56}, {174, 171, 89}, {226, 75, 63}, {158, 156, 165}, {186, 184, 94}, {50, 102, 61}, {144, 142, 149}, {33, 45, 60}, {88, 46, 48}},
    //Mi
    {{44, 63, 70}, {155, 153, 158}, {65, 73, 53}, {75, 41, 42}, {49, 72, 82}, {160, 157, 162}, {75, 85, 59}, {77, 41, 42}, {165, 120, 91}, {129, 126, 130}, {73, 83, 59}, {141, 138, 142}, {102, 55, 52}, {107, 55, 52}, {50, 74, 85}, {79, 41, 43}, {108, 56, 53}, {94, 106, 71}, {46, 65, 74}, {101, 54, 52}, {66, 75, 54}, {118, 89, 70}, {49, 72, 82}, {110, 56, 53}, {71, 80, 57}, {126, 94, 73}, {203, 199, 205}, {77, 41, 42}, {75, 86, 59}, {103, 54, 51}, {80, 41, 43}, {120, 91, 71}, {51, 76, 87}, {114, 86, 68}, {82, 44, 45}, {66, 102, 119}, {79, 41, 43}, {79, 89, 61}, {102, 54, 52}, {148, 145, 150}, {116, 114, 118}, {78, 89, 64}, {122, 120, 124}, {144, 143, 147}, {133, 68, 65}, {87, 49, 46}, {51, 69, 78}, {67, 39, 40}, {122, 92, 71}, {131, 98, 75}, {51, 75, 87}, {132, 98, 75}, {127, 95, 73}, {95, 47, 49}}};

#endif